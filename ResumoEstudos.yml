Devnet Associate Exam v1.0 (200-901)

Topicos:
  1.0 Software Development and Desing [15%]:
    1.1: Compare data formats (XML, JSON and YAML): 
    1.2: Describe parsing of common data format (XML, JSON and YAML) to Python: 
      TIPO - BIBLIOTECA - ONE LINER
      -----------------------------
      JSON - json (nativo) - import json; json.loads(
        '{"formato": "json"}')
      -----------------------------
      YAML - ruamel.yaml - from ruamel import yaml; yaml.safe_load(
        'formato: yaml(ruamel)')
      -----------------------------
      XML - xml.etree.ElementTree (nativo) - import xml.etree.ElementTree as ET; e = ET.fromstring('<user>Henrique</user>'); e.text
      XML - xml.dom.minidom (nativo) - import xml.dom.minidom as MD; MD.parseString('<user>Henrique</user>').childNodes[0].firstChild.data
    1.3: Describe the concepts of test driven development: 
      - step 1. Write a test that fails
      - step 2. Run test
      - step 3. Write App code to make test pass
      - step 4. Run all tests
        If all tests pass:
          - Refactor
        If any test fails:
          - Fix failed tests
      - Back to step 4
    1.4: Compare software development methods (agile, lean, waterfall): 
      Overal stages:
      - Requirements Gathering
      - Analysis
      - Design
      - Development
      - Quality Assurance
      - Deployment
      - Enhancements/Maintenance
      START OVER

      Relevant definitions:
        - Software Development Life Cycle (SDLC)

      Waterfall: linear process as if going through phases
        Pros:
          - Design erros can be highlighted before any code is writen
          - The process can only go through if the documentation is well writen
            This documentation can be very usefull later
          - Due to the rigid structure, progress measurement and setting milestones
            becomes easier
        Cons:
          - It's very unlikelly that the client will gather all possible requirements
          - Aplication re-engineer is very difficult and expensive
          - Little no none flexibility
          - There's only a product in the end of the process
          - It's usually a lengthy process
      Lean: it's a management philosophy / processes
        - Lean is merely a concept. Without a way to implement it, it is of no 
          value to the systems that need optimizing. Agile addresses the need for optimization.
        - eliminate eveything that is useless. If you don't need it, get rid of it
        Purpose: Which customer problems will the project solve?
        Process: How can I measure each step of the process and assess several aspects of it
        People: The root of it all. Right people to the right responsabilities and evaluation
      Agile: based on small and incremental releases
        Pros:
          - Shorter feedback cycle
          - Higher customer satisfaction
          - Provides flexibility to the process
        Cons:
          - No emphasis on good documentation, therefore it's usually left
            behind over newer product increments
          - Usually the final product is unclear in the beggining phases
    1.5: Explain the benefits of organizing code into methods / functions, classes and modules: OK
      - code reusability
      - one thing principle - where each block of code does only one thing
      - easier to maintain and improve
    1.6: Identify the advantages of common design patterns (MVC and Observer):
      Advantages:
        - design patterns are language independent
        - design patterns provide solutions to commonly occurring obstacles in software design
        - promote reusability
      Types os patterns:
        PENDING RESEARCH:
          - Strategy (MVC)
          - Composite (MVC)
        Creational:
          - Singleton
          - Abstract Factory
          - Prototype
          - Factory Method (MVC)
        Structural:
          - Adapter (MVC)
          - Decorator
          - Facade
          - Proxy
        Behavioral:
          - Observer (MVC)
          - Interpreter
          - Mediator
          - State

      MVC (Model View Controller):
        - separation of concern and independent development of each part
        - Views      -> responsable for displaying information
        - Models     -> encapsulate what the information for a system is
        - Controller -> Process input, change the model if needed and notify the view
          There's typically one controller for each view
        Pros:
          - Possible to have multiple views for the same model
          - It's easy to change the presentation of the data
          - Easily extendable
          - Separation of concern and development/testing
        Cons:
          - Complexity is usually high
          - The controller and the view are tightly coupled
          - Lot's of change notifications
      Observer:
          - It's also know as 'Event-Subscriber' or 'Listener'
          - It's easy to add new subscribers without having to change de publisher
    1.7: Explain the advantages of version control:
    1.8: Utilize common version control operations with Git:
      1.8.1: Clone
      1.8.2: Add/remove
      1.8.3: Commit
      1.8.4: Push/Pull
      1.8.5: Branch
      1.8.6: Merge and handle conflicts
      1.8.7: diff

  2.0 Understanding and Using APIs [20%]:
    2.1: Construct a REST API request to accomplish a task givern API documentation:
    2.2: Describe common usage patterns related to webhooks:
      - Reverse Client/Server roles
      - Respond to update events without wasting resources by polling periodically
      - Updates are send via HTTP POST request
    2.3: Identify the contraints when consuming APIs:
      - The network bandwidth, reliability and latency have to be properly taken in
        consideration when consuming APIs, specially from decentralized locations
      - Match the API data types
    2.4: Explain commin HTTP response codes associated with REST APIs:
      1xx: Info
      2xx: Success
      3xx: Redirect
      4xx: Client error
      5xx: Server error
    2.5: Troubleshoot a problem given the HTTP response code, request and API documentation:
    2.6: Identify the parts of an HTTP response (response code, headers, body):
    2.7: Utilize common API authentication mechanisms (basic, custom token, and API keys):
      basic: fixed user/pass generated by the server
      API key: pre-generated token by the server is used by client
      Custom token: dynamic gerenated token is used
    2.8: Compare common API styles (REST, RPC, synchronous and asynchronous):
    2.9: Construct a Python script that calls a REST API using the requests library:
  
  3.0 Cisco Platforms and Development [15%]:
    pass

  4.0 Application Deployment and Security [15%]:
    pass

  5.0 Infrastructure and Automation [20%]:
    5.1: Describe the value of model drivern programmability for infrastructure automation:
      - Easier to consume and extract information leads to better automation
    5.2: Compare controller-level to device-level management:
      vCenter vs vSphere
    5.3: Describe the use and roles of network simulation and test tolls (such as VIRL and pyATS):
      - Assert that the proposed modifications didn't generated unwanted side effects
      - Compare network state befoe and after a change/automation
    5.4: Describe the components and benefits of CI/CD pipeline in infrastructure automation:
    5.5: Describe the principles of infrastructure as code:
      - Traceable modifications
      - Easier to replace devices
      - New apps can be deployed easily
      - Infrastructure can be easily extended
      - Version control (GIT)
    5.6: Describe the cabalities of automation tools such as Ansible, Puppet, Chef and Cisco NSO:
    5.7: Identify the workflow being automated by a Python script that uses Cisco APIs:
      - including ACI, Meraki, Cisco DNA Center or RESTCONF
    5.8: Identify the workflow being automated by an Ansible Playbook:
    5.9: Identify the workflow being automated by bash script:
    5.10: Interpret the results of a RESTCONF or NETCONF query:
    5.11: Interpret basic YANG models:
    5.12: Interpret a unified diff:
    5.13: Describe the principles and benefits of a code review process:
    5.14: Interpret sequence diagram that include API calls: 

  6.0 Network Fundamentals:
    pass